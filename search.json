[{"title":"Hello World","url":"/2024/10/18/hello-world/","content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.\nQuick StartCreate a new post$ hexo new &quot;My New Post&quot;\nMore info: Writing\nRun server$ hexo server\nMore info: Server\nGenerate static files$ hexo generate\nMore info: Generating\nDeploy to remote sites$ hexo deploy\nMore info: Deployment\n"},{"title":"win系统安全","url":"/2024/10/21/win/","content":"\nimg {\n  display: block; /* 使图片成为块级元素 */\n  margin-left: auto;\n  margin-right: auto;\n}\n\n\n强杀进程PID 进程的编码\ntaskkill /PID x\n虚拟内存地址(VA)，文件地址(FA)，节偏移(offset)，基址(base)\n节偏移这一块最重要\n相对虚拟地址(RVA)=VA-base\nFA=RVA-offset\n软件爆破实验.text:0040155C                 jz      short loc_40156C.text:0040155E                 mov     dword ptr [esp], offset aRight ; &quot;right!&quot;.text:00401565                 call    _puts.text:0040156A                 jmp     short loc_40157A\n首先在IDA查找到分支的位置，再在OllyDbg中打开\n可以按ctrl+G直接跳转\n也可以观察程序位置特征：\n1.默认情况下将程序中断在PE装载器开始处\n2.按F8单步跟踪，main函数之前有连续三次压栈操作，为的是传参\n3.找到main函数后，按F7单步跟入（与F8的区别在于是否进入子函数）\n找到关键点之后，按F2设置断点\n按F9运行程序\n按F4运行至选定指令\nCTRL+F9执行到返回指令\nART+F9执行到用户程序\n完成调试：\nTSET EAX,EAXSETE AXJE SHORT XJMP SHORT X\nJE根据EAX的值来完成跳转，为了使逻辑相反，将JE改为JNE即可\n需要利用lordpe查看节偏移，再用16进制编辑器打开程序（010Editor），进行修改即可。\n栈溢出实验覆盖at变量设置断点到子函数的位置（验证函数），看局部变量的变化。\n\n\n以上分别是输入正确与错误密码的系统栈状态。\n可见buffer在at变量之上，可以进行覆盖，即缓冲区溢出攻击。\n\n输入qqqqqqqq，strcpy时还有null字符（00），直接覆盖了at变量。\n\n这里有一个细节，strcpy函数当前面的变量小于后面就会返回值为-1，不便覆盖成0。而如果返回为1的话，会在最右一个字节存1，利用buffer从右到左存字符，可以将00（null）覆盖1。\ntips：注意这里是小端序，字符低位在地址低位。找不到对应变量就多测试几次输入值来观察！！\n盖更多变量系统栈结构                                    \n\n继续往下覆盖可以得到更有效的结果。\n1.先在判断那一块设置断点，用F9直接跳入。\n2.用F7单步跟入观察栈的结构，\n首先观察前栈帧EBP。\n\nbuffer后面依次是at，前帧栈EBP，返回地址。\n1.覆盖EBP\n\n2.覆盖返回地址\n变量后面即是地址。\n\n可见指向无效地址。\n取文件来修改返回地址由于键盘输入无法输入x11，x12等值，因此只能读取文件来修改特定的返回地址。\n\n区植入代码原理：栈区和指令区共用内存，因此可以把栈区buffer的内容修改成预期代码，再修改返回值到buffer变量位置进行执行。\n注意切换位debug版本，里面植入了调试所需的信息，没有进行优化，而release进行了很多优化，代码不再“原汁原味”。\n\n注意： \n1.buffer开大的原因是为了植入代码时不破坏正常的代码区。       \n2.64位机中, sizeof(int)=4, 但实际占用了8个字节!!!    \n3.lea指令和mov指令的差别在于赋值的是地址还是数据。\n4.cdecl调用指参数从右向左入栈，由调用者清理栈空间。\n5.stdcall调用由子程序平衡堆栈。\n堆栈平衡：ESP恢复成EBP，使得栈区得到清理，恢复调用之前的状态。\n使用window API :MessageBox  由windows.h头文件包含，链接了user32.dll。\nWindows 3大API user32.dll ,kernel32.dll,gdi32.dll.\n放在buffer中，再通过返回地址来执行\n1.找到动态链接库user32.dll的内存地址。\n\n使用了process explore来查看user32.dll的内存。\n存疑：我为什么找不到user32.dll.\n通过复杂的手段，找出了加载地址和导出函数的偏移\n整体基址：75320000\n导出函数偏移：7B160 （单独将user32.dll放进ida中查到的）\n因此函数实际入口地址：7539B160\n？？？？？？？这里是不是od有缓存之类的，程序运行不正常\n\n\nma地址为7500b1d0\n现在的问题式不能解决00，跳过。。。猜想：把buf内调用函数地址调整为先给某个寄存器赋值，再把这个寄存器的值赋给EAX。这样可以利用指令中的逻辑运算完成。（可以利用减法）\n2.在buffer的部分写入弹窗代码\nCLI /STI指令：禁止/允许中断发生\nOUTS指令：输出到终端\n\n第一步要格外注意，要将EBX赋为0后压入栈，而不是直接把0入栈，是为了不产生null导致strcpy截断。\n就是让代码中不出现00。\n第二步把参数入栈，再调用MessageBoxA函数。运行后弹窗成功！\n\n点击确定后会直接崩溃，因为没有安全退出函数，没有恢复寄存器和堆栈。\nshellcode用ESP的做跳板由于要跳转的函数可能在ddl中，需要有动态寻址的方法。\n\n函数返回时，ESP总是指向返回地址后一个地址，因此可以动态定位。\n在栈中的函数返回地址中填充 内存中jmp esp 指令的地址，指令执行情况就是在返回地址的地方先跳转到jmp esp 指令的地址，因为发生了弹栈，esp指向下一个地址，之后按照 jmp esp 指令跳转至esp。\n这样的结果就是不因buf缓冲区空间大小限制了shellcode的长度，可以延申到下一个帧栈。\n选取 751217c5 作为跳板\n\n调用MessageBox后，调用exit函数退出程序。\n回地址修改到exit函数exit函数在kernel32.dll中，先找到函数入口地址。\n\n\n得到函数入口地址为 75277460\n妙生成含00的地址ma地址为7500b1d0\nx= 8a104f31 \n添加shellcode：\nMOV EAX ,ff110101\nSUB EAX,x\n机器码：\nB8 010111FF\n2D 314F108A\n决压栈覆盖shellcode问题再shellcode中让ESP加一些偏移，因为之后不会再回到主函数，不用考虑覆盖的影响。并且局部变量由EBP访问，只有EBP的值不变即可正常访问局部变量。\n在这种方法下，ESP增大，在call子函数时，ESP和EBP相当于整体下移，使得压栈操作远离shellcode，就不影响shellcode区域的代码了。\n1\n","tags":["security"]},{"title":"网络攻击技术","url":"/2024/10/21/syberattack/","content":"基础知识动态链接，静态链接静态库（ .a ）：程序在编译链接的时候把库的代码链接到可执行文件中。程序运行的时候将不再需要静态库。\n动态库（ .so ）：程序在运行的时候才去链接动态库的代码，多个程序共享使用库的代码。\n静态链接命令：\ngcc -o test_static test.c -static\n\n独立性：生成的可执行文件不依赖于外部的库文件，可以在没有这些库文件的环境中独立运行。\n\n  PLT与GOT表均为动态链接过程中的重要部分\n  GOT: Global Offset Table, 全局偏移表，包含所有需要动态链接的外部函数的地址（在第一次执行后）  PLT: Procedure Link Table, 过程链接表，包含调用外部函数的跳转指令（跳转到GOT表中），以及初始化外部调用指令（用于链接器动态绑定dl_runtime_resolve）\nTEE可信执行环境用于Android，与os分离开，程序之间不能进行未授权的访问。\n攻击技术概念举例极光APT攻击— (Advanced Persistent Threat)即高级持续性威胁，是一种周期较长、隐蔽性极强的攻击模式。 \n原理：访问url，解析页面过程触发漏洞，下载木马，因为是http没有被防火墙拦。\n漏洞三个方面：计算机系统，网络，人。\ngoole中招。\nwanacry勒索软件。\n历史：NSA 开发”永恒之蓝”，黑客组织入侵得到软件。ms 于17年发布补丁，两个月后大肆传播。\n分类近源攻击包括物理攻击、社会工程学攻击、无线网络攻击。\n物理攻击：摄像头，锁。\n社会工程学攻击：《欺骗的艺术》。\n网络嗅探与协议分析工具：wireshark，sniffer pro\n网络嗅探：网络监听、窃听。\n作用：内网渗透、监听流量、排除程序错误。\n链路层嗅探以太网嗅探、wifi嗅探\n共享网络：通过Hub连接\n通过调整混杂模式即可。\n交换式网络：通过Switch连接\nMAC地址泛洪导致映射表溢出转换为共享式\nMAC欺骗欺骗交换机。\nARP欺骗欺骗PC或路由器。\nWIFI网络嗅探检测操作系统特性发送 icmp echo （ping）看是否回应（混杂模式下会回应）。\n根据网络和主机性能检测响应时间。\n网络嗅探防御安全的网络拓扑加密静态mac映射集中位置点防御wireshark使用过滤规则例子，ip.addr == 127.0.0.1  and http\n实现ip地址与协议过滤\n查看cookie与sessioncookie:\n1.cookie用于辨别身份，存放在本地。\n2.cookie即可以保存在内存中也可以保存在硬盘中。\n3.expire值指定了cookie的生存周期。\nsession:\n1.session用于传递数据，存放在服务器。\n2.用于会话控制。 Session 对象存储特定用户会话所需的属性及配置信息。 \njwt\ntoken\n信息搜集网络踩点目标组织与个人。可直接访问的ip，寻找跳板。\n入侵检测系统，网络结构。\n—技术手段—\ndns与ip查询ICANN 因特网技术协调机构 \n百度被黑（dns服务器出问题）\nDNS域名解析过程\ndns查询:nslookup/dig （也可以反向查 nslookup -qt=ptr ip [dnsserver]）\nip 查询:whois\nIP2Location -地理信息查询 ：google earth，google map\nGPS 定位\nweb信息搜索与挖掘google hacking\n远程桌面web连接\njohnny long,athena\n公共信息服务：深度伪造\n社交网络挖掘\ngoogle hacking 用法：\n基础用法\n1.A -B     搜索不出现B关键字\n2.”A”       强制结果出现关键字A且不会进行切割\n3.site:A   指定搜索A域名下的网站\n4.filetype:pdf   文件类型 \n5.inurl:.php?id=       inurl: /admin/login.php       网站url出现关键字\n7.intitle:keyword  搜索标题存在特定关键字的网页 \n8.intitle:“index” of password       搜寻目录索引信息 \n9.intext:keyword   搜索正文存在特定关键字的网页 \n10.site:baidu.com 搜索和目标网站有联系的URL  （这个是域名相关，单纯的inurl是出现关键字，可能不是一个域名）\n进阶用法\n intext:to parent directory \n Uncode目录遍历漏洞 \n网络拓扑侦察路由追踪：tracert A\n网络扫描扫描分类主机扫描：找出网段内活跃的主机\n端口扫描：找出主机上开发的网络服务\n操作系统/网络服务辨识：识别主机的操作系统与开发的网络服务类型\n漏洞扫描：找出主机/网络服务上的安全漏洞\n主机扫描Ping （主机扫描）\nICMP Ping\nACK Ping\nSYN Ping\nUDP Ping\nPing扫射\nNmap ：-sp 缺省执行\nfping，hping2\nsuperscan\n入侵监测\nSnort，Scanlogd\n端口扫描连接TCP/UDP端口，确定哪些服务在运行或者监听。\nTCP端口扫描：看是否直接恢复rst判断是否开放\nTCP连接扫描 -sT\nSYN扫描：半开扫描 -sS\n隐蔽端口扫描\nFTP弹射扫描\nUDP端口扫描：UDP REP-&gt;  ICMP端口不可达（端口没有开放）\nnmap重点掌握\n系统探查为攻击做准备\n主动与被动探测技术\n主动协议栈指纹鉴别\nFyodor，Phrack\n指纹：FIN,TCP初始窗口大小等\n被动识别\np0f\n漏洞扫描漏洞：软件、硬件、策略的安全缺陷\n扫描已经公布的漏洞。\n不可避免的原因：1.系统设计缺陷（TCP/IP,Internet)2.代码量膨胀。3.软件缺陷\n漏洞扫描技术：\n1.渗透测试\n2.漏扫软件 ：ISS, SATAN ,NESSUS, OPENVAS  ,Xscan \n漏洞扫描防范：先扫描修补漏洞，FDCC 补丁自动管理，检测snort。\n网络查点在踩点与扫描之后针对性探测安全问题。\n网络服务旗标攫取：连接网站\nSMTP,    NetBIOS\nSMB 打印机 ，匿名\nIPC$\n盘符共享\n网络攻击技术Dos攻击定义：利用网络协议、软件的漏洞使目标计算机资源耗尽。\n攻击者发送带有虚假地址的报文，使服务器去访问虚假的地址，但是得不到回复，从而无法释放资源（一直等待）。\n攻击类型1.消耗资源\n消耗网络带宽：大量报文占用网络带宽。\n消耗磁盘空间：让用户磁盘内充满垃圾信息。\n消耗cpu和内存资源：造成系统性能下降或崩溃。\n2.配置修改\n改变路由信息：Windows NT注册表，UNIX /etc 下文件（一个点被控制，整个区域受影响）。\n3.系统缺陷型\n通过故意输错密码来限制用户使用时间。\n4.物理破坏\n攻击形式分类：SYN Flood发送SYN 不进行确认，服务器进行等待。\n通常用IP欺骗技术（攻击来源无法定位，无法确定合不合法）。对Windows NT攻击很有效。\n防御：过滤ip\n死ping缓冲区大小64KB, ICMP 超过64KB将缓冲区溢出。\n泪滴利用协议漏洞\n防御：服务器用最新的服务包，先重组再转发。\nLand攻击SYN包，源地址和目的地址是同一个服务器。\n自己和自己建立TCP连接。\nsmurf攻击采用ICMP攻击\n（a）找出网络上回复ICMP的路由器。\n（b）向路由器广播地址发出讯息，路由器会广播到每一台设备。\n（c）这些设备马上回应，占用网络带宽。\nFraggle攻击与smurf类似，用UDP Echo\n防御：过滤UDP应答消息\n炸弹攻击对目标机发送大量垃圾信息。\nDDOS攻击分布攻击\n攻击端，主控端，代理端。\n攻击端：攻击者的主机。\n主控端：攻击者直接控制的主机。\n代理端：攻击者间接控制的主机。\n僵尸网络：IRC Bot ，Command &amp; Control Server\nIRC Bot：网络聊天室协议\n防御僵尸网络：IDS（指纹信息),行为监测法，蜜罐捕获法\n防御封ip（源），增加带宽。\n缓冲区溢出栈，堆（new，delete），自由存储区（malloc，free），全局变量区，常量区。\n详见win安全。\n网站攻击基础知识HTML静态标记语言，能够生成表单脚本，动态页面\n动态页面：CGI\n脚本语言:ASP,PHP,JSP\n插件：ActiveX，PPAPI,NPAPI\n前端通过AJAX发送请求，js处理返回的数据\n手工代码审查静态与动态页面代码，参数名称、类型、含义，注释，表单隐藏字段。\n表单提交方法，脚本，自动完成标记，口令字段。\n自动下载与镜像curl/wget/Lynx\nLibcurl\nGoogle Hacking攻击web服务器软件MS:WinServer/IIS/SQL Server/ASP\nLINUX:Apache/Tomcat/PHP\nIIS/MS SQL 攻击软件:红色代码，尼姆达\n目录遍历功能\n组件漏洞Spring，Log4j，WordPress，ThinkPHP\n敏感信息泄露GF,BM\nWeb服务器目录遍历\nUpload，Incoming转文件漏洞\n恶意代码攻击CNcert\nCIH病毒： 98年 ，危险程度最大。覆盖硬盘与BIOS芯片。\nMelissa病毒：Word宏脚本病毒。\nILOVEYOU：蠕虫。\n红色代码：蠕虫。\n修改注册表：\n注册表启动项\n修改配置文件\n网络攻击震荡波：MS04-001漏洞攻击\narp 欺骗rootkit 隐藏进程应用级，硬件级，内核级。\n隐藏文件：strace ls :sys_getdents64 ,readdir,ext2\n隐藏进程：proc\n内核后门\n嗅探工具\n密码记录\nlkm注射\n模块摘除\n拦截中断\n端口反弹\n劫持系统调用\n木马木马伪装图片，游戏，捆绑程序，扩展组件(dll,ocx).\n存放windows\\system 靠近系统文件\n木马编程修改注册表，调用win32 api，多线程，后台监控，定时触发器，socket编程\n木马植入攻击植入（获得服务器控制权后植入），漏洞植入，伪装欺骗.\nQAZ 木马植入将notepad.exe 修改为 note.com,然后生成新的notepad.exe（带木马).利用共享磁盘在局域网传播.\n启动方式自动启动(注册表，win.ini,system.ini），捆绑启动，修改文件关联(让木马打开.txt 而非 notepad.exe)\n屏幕保护程序\n病毒处理测试保护模式运行，删除启动项，服务\n识别加载项：winlogon\n判断是否有完整的版本信息\n取消隐藏\n修复host文件\n临时目录\n工具HijackThis\nProcess Explorer\nIceSword\nLspfix&amp;Winsockfix\nSIC 3.0\nAutoruns\nTCPView\nRegmon,InstallRite\nFilemon,InstallRite\n例子灰鸽子\n传奇木马\nWORM_LOVGATE.AE\nPE_LOOKED.ID-0\n身份认证与口令主动口令攻击\npydictor字典\nLAN Manager\n口令存储:SAM数据库\n网络协议安全网络安全属性CIA属性:机密性，完整性，可用性\n附加属性:真实性，不可抵赖性（可审查性）\n米特尼克，克利夫特.\n网络协议安全攻击Sniffer \nRaw Socket\nLibnet\nscapy\nNetwox/Netwag\n盲攻击A,B,C    C 信任B\nA 先dos攻击让B瘫痪，再冒充B与C建立连接 (猜测ISN).\n先建立连接过渡.\n放大攻击\narp欺骗\nRST攻击阻断连接(GFW)\n中间人发送RST强制断掉链接，需要注意IP,端口号匹配，序号在滑动窗口内.\n西厢计划\non-PATH DNS 欺骗需要响应更快\nTCP SYN FLOODdos攻击\n无线网安全种类蓝牙协议：802.15.1\nWiMax  : 802.16.1\ncellular network 2g3g\n卫星网\n","tags":["security"]},{"title":"离散对数算法","url":"/2024/10/21/discreteAlgorithm/","content":"1.BabyStep -GiantStep (BSGS)baby:\ngiant: \nx=b+g 可以表示所有的值\nSuppose we have  , then,we create two lists.\n\n\n用空间换时间，当  中一个元素一定与  中一个元素相等，如此可以用哈希表的方法，枚举每一个中元素，然后在哈希表中查询是否由元素与之相等,即可找出 x.\n2.Pohlig-Hellman该算法处理   有很多小因子的情况. \n假设其中一个因子为 ，  是模  的原根 , 于是    的阶为  .\n原式    转化为 .\n 在  之间枚举 , 得到  , 这个解是必要条件，否则无法满足转化后的式子.\n最后用  即可还原出真正的  .\n","tags":["math"]}]